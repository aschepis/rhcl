#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.2
# from Racc grammar file "".
#

require 'racc/parser.rb'


require 'strscan'

module Rhcl
  class Parse < Racc::Parser

module_eval(<<'...end parse.y/module_eval...', 'parse.y', 115)

TRUE_VALUES  = %w(true  on  yes)
FALSE_VALUES = %w(false off no )
BOOLEAN_VALUES = TRUE_VALUES + FALSE_VALUES

def initialize(obj)
  src = obj.is_a?(IO) ? obj.read : obj.to_s
  @ss = StringScanner.new(src)
end

def scan
  tok = nil
  @backup = []

  until @ss.eos?
    if (tok = backup { @ss.scan /\s+/ })
      # nothing to do
    elsif (tok = backup { @ss.scan /#/ })
      backup { @ss.scan_until /\n/ }
    elsif (tok = backup { @ss.scan %r|/| })
      case (tok = backup { @ss.getch })
      when '/'
        backup { @ss.scan_until /(\n|\z)/ }
      when '*'
        nested = 1

        until nested.zero?
          case (tok = backup { @ss.scan_until %r{(/\*|\*/|\z)} })
          when %r|/\*\z|
            nested += 1
          when %r|\*/\z|
            nested -= 1
          else
            break
          end
        end
      else
        raise "comment expected, got #{tok.inspect}"
      end
    elsif (tok = backup { @ss.scan /-?\d+\.\d+/ })
      yield [:FLOAT, tok.to_f]
    elsif (tok = backup { @ss.scan /-?\d+/ })
      yield [:INTEGER, tok.to_i]
    elsif (tok = backup { @ss.scan /,/ })
      yield [:COMMA, tok]
    elsif (tok = backup { @ss.scan /\=/ })
      yield [:EQUAL, tok]
    elsif (tok = backup { @ss.scan /\[/ })
      yield [:LEFTBRACKET, tok]
    elsif (tok = backup { @ss.scan /\]/ })
      yield [:RIGHTBRACKET, tok]
    elsif (tok = backup { @ss.scan /\{/ })
      yield [:LEFTBRACE, tok]
    elsif (tok = backup { @ss.scan /\}/ })
      yield [:RIGHTBRACE, tok]
    elsif (tok = backup { @ss.scan /"/ })
      yield [:STRING, (backup { @ss.scan_until /("|\z)/ } || '').sub(/"\z/, '')]
    elsif (tok = backup { @ss.scan /var\..*/ })
      yield [:REFERENCE, tok]
    elsif (tok = backup { @ss.scan /[()a-zA-Z_]+(\.[()a-zA-Z_]+)+/ })
      yield [:REFERENCE, tok]
    else
      identifier = (backup { @ss.scan_until /(\s|\z)/ } || '').sub(/\s\z/, '')
      token_type = :IDENTIFIER

      if BOOLEAN_VALUES.include?(identifier)
        identifier = TRUE_VALUES.include?(identifier)
        token_type = :BOOL
      end
      
      yield [token_type, identifier]
    end
  end

  yield [false, '$end']
end
private :scan

def backup
  tok = yield
  @backup << tok if tok
  return tok
end

def parse
  yyparse self, :scan
end

def on_error(error_token_id, error_value, value_stack)
  raise_error(error_value)
end

def raise_error(error_value)
  header = "parse error on value: #{error_value}\n"
  error_value = @backup.pop

  if error_value =~ /\n\z/
    error_value = '__' + error_value.chomp + "__\n"
  else
    error_value = '__' + error_value + '__'
  end

  prev = (@backup || [])
  prev = prev.empty? ? '' : prev.join + ' '
  errmsg = prev + error_value

  if @ss and @ss.rest?
    errmsg << ' ' + @ss.rest
  end

  lines = errmsg.lines
  err_num = prev.count("\n")
  from_num = err_num - 3
  from_num = 0 if from_num < 0
  to_num = err_num + 3
  digit_num = lines.count.to_s.length

  errmsg = lines.each_with_index.map {|line, i|
    mark = (i == err_num) ? '*' : ' '
    '%s %*d: %s' % [mark, digit_num, i + 1, line]
  }.slice(from_num..to_num).join

  raise Racc::ParseError, header + errmsg
end
private :raise_error

def self.parse(obj)
  self.new(obj).parse
end
...end parse.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,    33,    34,     9,    16,    17,    18,    21,     7,    14,
    22,    23,     3,    30,    31,     6,    27,   nil,    22,    23,
    30,    31,    10,   nil,    13,    22,    23,     6,    25,     3,
    32,     3,     6,     3,     6,   nil,     6 ]

racc_action_check = [
     9,    26,    26,     3,     9,     9,     9,     9,     1,     7,
     9,     9,     1,    21,    21,     1,    21,   nil,    21,    21,
    34,    34,     5,   nil,     5,    34,    34,     5,    10,    10,
    24,    24,    10,     0,    24,   nil,     0 ]

racc_action_pointer = [
    29,     8,   nil,    -2,   nil,    20,   nil,     9,   nil,    -2,
    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6,   nil,   nil,    27,   nil,    -9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    13,   nil ]

racc_action_default = [
   -25,   -25,    -1,   -14,   -11,   -25,   -15,   -25,    -2,   -25,
   -25,   -12,   -13,   -14,    36,    -5,    -6,    -7,    -8,    -9,
   -10,   -25,   -23,   -24,   -25,    -4,   -25,   -17,   -18,   -20,
   -21,   -22,    -3,   -16,   -25,   -19 ]

racc_goto_table = [
     8,    28,     1,    11,    15,    20,    12,    19,    26,   nil,
   nil,   nil,    24,   nil,    35,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     8 ]

racc_goto_check = [
     2,     9,     1,     3,     4,     5,     6,     3,     8,   nil,
   nil,   nil,     1,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     2,    -1,    -2,    -5,    -4,     1,   nil,   -13,   -20 ]

racc_goto_default = [
   nil,   nil,     2,   nil,    29,   nil,     4,     5,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 15, :_reduce_1,
  2, 15, :_reduce_2,
  3, 17, :_reduce_3,
  2, 17, :_reduce_4,
  3, 16, :_reduce_5,
  3, 16, :_reduce_6,
  3, 16, :_reduce_7,
  3, 16, :_reduce_8,
  3, 16, :_reduce_9,
  3, 16, :_reduce_10,
  1, 16, :_reduce_11,
  2, 20, :_reduce_12,
  2, 20, :_reduce_13,
  1, 21, :_reduce_14,
  1, 21, :_reduce_15,
  3, 19, :_reduce_16,
  2, 19, :_reduce_17,
  1, 22, :_reduce_18,
  3, 22, :_reduce_19,
  1, 23, :_reduce_20,
  1, 23, :_reduce_21,
  1, 23, :_reduce_22,
  1, 18, :_reduce_23,
  1, 18, :_reduce_24 ]

racc_reduce_n = 25

racc_shift_n = 36

racc_token_table = {
  false => 0,
  :error => 1,
  :LEFTBRACE => 2,
  :RIGHTBRACE => 3,
  :IDENTIFIER => 4,
  :EQUAL => 5,
  :BOOL => 6,
  :STRING => 7,
  :REFERENCE => 8,
  :LEFTBRACKET => 9,
  :RIGHTBRACKET => 10,
  :COMMA => 11,
  :INTEGER => 12,
  :FLOAT => 13 }

racc_nt_base = 14

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LEFTBRACE",
  "RIGHTBRACE",
  "IDENTIFIER",
  "EQUAL",
  "BOOL",
  "STRING",
  "REFERENCE",
  "LEFTBRACKET",
  "RIGHTBRACKET",
  "COMMA",
  "INTEGER",
  "FLOAT",
  "$start",
  "objectlist",
  "objectitem",
  "object",
  "number",
  "list",
  "block",
  "blockId",
  "listitems",
  "listitem" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parse.y', 5)
  def _reduce_1(val, _values)
                     val[0]

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 9)
  def _reduce_2(val, _values)
                     val[0].deep_merge(val[1])

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 14)
  def _reduce_3(val, _values)
                val[1]

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 18)
  def _reduce_4(val, _values)
                {}

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 23)
  def _reduce_5(val, _values)
                    {val[0] => val[2]}

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 27)
  def _reduce_6(val, _values)
                    {val[0] => val[2]}

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 31)
  def _reduce_7(val, _values)
                    {val[0] => val[2]}

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 35)
  def _reduce_8(val, _values)
                    {val[0] => val[2]}

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 39)
  def _reduce_9(val, _values)
                    {val[0] => val[2]}

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 43)
  def _reduce_10(val, _values)
                    {val[0] => val[2]}

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 47)
  def _reduce_11(val, _values)
                    val[0]

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 52)
  def _reduce_12(val, _values)
               {val[0] => val[1]}

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 56)
  def _reduce_13(val, _values)
               {val[0] => val[1]}

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 62)
  def _reduce_14(val, _values)
                 val[0]

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 66)
  def _reduce_15(val, _values)
                 val[0]

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 71)
  def _reduce_16(val, _values)
              val[1]

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 75)
  def _reduce_17(val, _values)
              []

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 80)
  def _reduce_18(val, _values)
                   [val[0]]

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 84)
  def _reduce_19(val, _values)
                   val[0] + [val[2]]

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 89)
  def _reduce_20(val, _values)
                  val[0]

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 93)
  def _reduce_21(val, _values)
                  val[0]

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 97)
  def _reduce_22(val, _values)
                  val[0]

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 102)
  def _reduce_23(val, _values)
                val[0]

  end
.,.,

module_eval(<<'.,.,', 'parse.y', 106)
  def _reduce_24(val, _values)
                val[0]

  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parse
end   # module Rhcl
